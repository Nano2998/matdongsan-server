name: Deploy to EC2 on Develop Branch

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Repository Checkout
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Parse EC2 and Docker Credentials
      - name: Parse Credentials
        id: credentials
        run: |
          echo "EC2_HOST=$(echo '${{ secrets.EC2_CREDENTIALS }}' | jq -r .ec2_host)" >> $GITHUB_ENV
          echo "EC2_USER=$(echo '${{ secrets.EC2_CREDENTIALS }}' | jq -r .ec2_user)" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=$(echo '${{ secrets.EC2_CREDENTIALS }}' | jq -r .aws_access_key_id)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo '${{ secrets.EC2_CREDENTIALS }}' | jq -r .aws_secret_access_key)" >> $GITHUB_ENV
          echo "DOCKER_USERNAME=$(echo '${{ secrets.DOCKER_CREDENTIALS }}' | jq -r .username)" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$(echo '${{ secrets.DOCKER_CREDENTIALS }}' | jq -r .password)" >> $GITHUB_ENV

      # 4. Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 5. Create application.yaml file
      - name: Create application.yaml
        run: |
          mkdir -p src/main/resources  # 필요한 디렉토리가 없으면 생성
          echo "${{ secrets.APPLICATION }}" > src/main/resources/application.yaml

      # 6. Build with Gradle
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 7. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # 8. Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ env.DOCKER_USERNAME }}/matdongsan-server:latest .

      # 9. Push Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push ${{ env.DOCKER_USERNAME }}/matdongsan-server:latest

      # 10. Prepare SSH Key for EC2
      - name: Add EC2 SSH Key
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > ec2_key.pem
          chmod 600 ec2_key.pem

      # 11. Deploy to EC2
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ env.EC2_HOST }}
          EC2_USER: ${{ env.EC2_USER }}
          DOCKER_IMAGE: ${{ env.DOCKER_USERNAME }}/matdongsan-server:latest
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
            # Stop and remove any existing container
            docker stop matdongsan-server || true
            docker rm matdongsan-server || true

            # Pull the latest Docker image
            docker pull $DOCKER_IMAGE

            # Run the Docker container
            docker run -d --name matdongsan-server -p 8080:8080 $DOCKER_IMAGE
          EOF
